from abc import ABC, abstractmethod
import math

class Figura(ABC):
    def __init__(self, color: str):
        self.color = color

    def obtenerColor(self) -> str:
        return self.color

    @abstractmethod
    def perimetro(self) -> float:
        pass

    @abstractmethod
    def area(self) -> float:
        pass

class Triangulo(Figura):
    def __init__(self, color: str, lado1: float, lado2: float, lado3: float):
        super().__init__(color)
        self.lado1 = lado1
        self.lado2 = lado2
        self.lado3 = lado3

    def perimetro(self) -> float:
        return self.lado1 + self.lado2 + self.lado3

    def area(self) -> float:
        s = self.perimetro() / 2
        return math.sqrt(s * (s - self.lado1) * (s - self.lado2) * (s - self.lado3))

class Circulo(Figura):
    def __init__(self, color: str, radio: float):
        super().__init__(color)
        self.radio = radio

    def perimetro(self) -> float:
        return 2 * math.pi * self.radio

    def area(self) -> float:
        return math.pi * self.radio ** 2

class Rectangulo(Figura):
    def __init__(self, color: str, ancho: float, alto: float):
        super().__init__(color)
        self.ancho = ancho
        self.alto = alto

    def perimetro(self) -> float:
        return 2 * (self.ancho + self.alto)

    def area(self) -> float:
        return self.ancho * self.alto

class Hexagono(Figura):
    def __init__(self, color: str, lado: float):
        super().__init__(color)
        self.lado = lado

    def perimetro(self) -> float:
        return 6 * self.lado

    def area(self) -> float:
        return (3 * math.sqrt(3) * (self.lado ** 2)) / 2

figuras = [
    Triangulo("Rojo", 3, 4, 5),
    Circulo("Azul", 2.5),
    Rectangulo("Verde", 4, 5),
    Hexagono("Amarillo", 6)
]

for figura in figuras:
    print(f"{figura.__class__.__name__} - Color: {figura.obtenerColor()}, Perímetro: {figura.perimetro()}, Área: {figura.area()}")
