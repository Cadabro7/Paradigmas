from abc import ABC, abstractmethod

class Figure(ABC):
    def __init__(self, color: str):
        self.color = color

    def getColor(self) -> str:
        return self.color

    @abstractmethod
    def perimeter(self) -> float:
        pass

    @abstractmethod
    def area(self) -> float:
        pass

import math

class Triangle(Figure):
    def __init__(self, color: str, side1: float, side2: float, side3: float):
        super().__init__(color)
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3

    def perimeter(self) -> float:
        return self.side1 + self.side2 + self.side3

    def area(self) -> float:
        s = self.perimeter() / 2
        return math.sqrt(s * (s - self.side1) * (s - self.side2) * (s - self.side3))

import math

class Circle(Figure):
    def __init__(self, color: str, radius: float):
        super().__init__(color)
        self.radius = radius

    def perimeter(self) -> float:
        return 2 * math.pi * self.radius

    def area(self) -> float:
        return math.pi * self.radius ** 2

class Rectangle(Figure):
    def __init__(self, color: str, length: float, width: float):
        super().__init__(color)
        self.length = length
        self.width = width

    def perimeter(self) -> float:
        return 2 * (self.length + self.width)

    def area(self) -> float:
        return self.length * self.width

import math

class Hexagon(Figure):
    def __init__(self, color: str, side: float):
        super().__init__(color)
        self.side = side

    def perimeter(self) -> float:
        return 6 * self.side

    def area(self) -> float:
        return (3 * math.sqrt(3) / 2) * self.side ** 2

def main():
    shapes = [
        Triangle("red", 3, 4, 5),
        Circle("blue", 10),
        Rectangle("green", 4, 6),
        Hexagon("yellow", 2)
    ]

    for shape in shapes:
        print(f"{shape.__class__.__name__} - Color: {shape.getColor()}, Perimeter: {shape.perimeter()}, Area: {shape.area()}")

if __name__ == "__main__":
    main()
